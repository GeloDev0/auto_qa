// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model User {
//   id          Int      @id @default(autoincrement())
//   email     String   @unique
//   name        String?
//   lname        String?
//   password    String?
//   imageUrl    String?
//   clerkUserId String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

enum TestCasePriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  name          String?
  lname         String?
  password      String?
  imageUrl      String?
  clerkUserId   String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  testCases     TestCase[]  @relation("UserTestCases")
}

model Project {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  clerkUserId  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  testCases    TestCase[]
}

model TestCase {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  steps          String?
  expectedResult String?

  priority       TestCasePriority  @default(MEDIUM)
  projectId      Int
  authorId       Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  project        Project           @relation(fields: [projectId], references: [id])
  author         User              @relation("UserTestCases", fields: [authorId], references: [id])
}