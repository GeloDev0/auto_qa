generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                Int            @id @default(autoincrement())
  email                             String         @unique
  name                              String?
  lname                             String?
  password                          String?
  imageUrl                          String?
  clerkUserId                       String         @unique
  createdAt                         DateTime       @default(now())
  updatedAt                         DateTime       @updatedAt
  notifications                     Notification[]
  Project_Project_createdByIdToUser Project[]      @relation("Project_createdByIdToUser")
  projects                          Project[]      @relation("UserProjects")
}

model Project {
  id                             Int             @id @default(autoincrement())
  description                    String?
  status                         ProjectStatus   @default(ACTIVE)
  priority                       ProjectPriority @default(MEDIUM)
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime        @updatedAt
  title                          String?
  createdById                    Int?
  startDate                      DateTime? // ðŸ‘ˆ Add this
  deadline                       DateTime? // ðŸ‘ˆ Add this
  User_Project_createdByIdToUser User?           @relation("Project_createdByIdToUser", fields: [createdById], references: [id])
  TestCase                       TestCase[]
  members                        User[]          @relation("UserProjects")
  notifications                  Notification[] // optional, but useful
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  projectId Int? // âœ… optional or required depending on your logic
  project   Project? @relation(fields: [projectId], references: [id])
}

/**
 * ** TestCase schema ****
 */
model TestCase {
  id           Int              @id @default(autoincrement())
  title        String?
  description  String?
  status       TestCaseStatus   @default(PENDING)
  priority     TestCasePriority @default(MEDIUM)
  actualResult String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime
  projectId    Int?
  module       String?
  Project      Project?         @relation(fields: [projectId], references: [id])
  testSteps    TestStep[]
}

model TestStep {
  id             Int      @id @default(autoincrement())
  action         String
  expectedResult String
  testCaseId     Int
  TestCase       TestCase @relation(fields: [testCaseId], references: [id])
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
}

enum TestCasePriority {
  LOW
  MEDIUM
  HIGH
}

enum TestCaseStatus {
  PENDING
  PASS
  FAIL
}
